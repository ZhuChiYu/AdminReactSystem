generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              Int                       @id @default(autoincrement())
  userName                        String                    @unique @map("user_name") @db.VarChar(50)
  nickName                        String                    @map("nick_name") @db.VarChar(50)
  email                           String?                   @unique @db.VarChar(100)
  phone                           String?                   @unique @db.VarChar(20)
  password                        String                    @db.VarChar(255)
  displayPassword                 String?                   @map("display_password") @db.VarChar(255)
  avatar                          String?                   @db.VarChar(500)
  gender                          Int                       @default(0)
  status                          Int                       @default(1)
  lastLoginIp                     String?                   @map("last_login_ip") @db.VarChar(50)
  lastLoginTime                   DateTime?                 @map("last_login_time")
  departmentId                    Int?                      @map("department_id")
  position                        String?                   @db.VarChar(100)
  address                         String?                   @db.VarChar(500)
  bankCard                        String?                   @map("bank_card") @db.VarChar(50)
  idCard                          String?                   @map("id_card") @db.VarChar(18)
  wechat                          String?                   @db.VarChar(100)
  tim                             String?                   @db.VarChar(100)
  contractYears                   Int?                      @map("contract_years")
  contractStartDate               DateTime?                 @map("contract_start_date")
  contractEndDate                 DateTime?                 @map("contract_end_date")
  createdAt                       DateTime                  @default(now()) @map("created_at")
  updatedAt                       DateTime                  @updatedAt @map("updated_at")
  uploadedAttachments             Attachment[]              @relation("AttachmentUploader")
  assignedCustomerRelations       CustomerAssignment[]      @relation("CustomerAssignedBy")
  customerAssignments             CustomerAssignment[]      @relation("CustomerAssignedTo")
  assignedCustomers               Customer[]                @relation("AssignedToUser")
  assignedByCustomers             Customer[]                @relation("AssignedByUser")
  createdCustomers                Customer[]                @relation("CreatedByUser")
  assignedRelations               EmployeeManagerRelation[] @relation("AssignedByRelation")
  employeeRelations               EmployeeManagerRelation[] @relation("EmployeeRelation")
  managedEmployees                EmployeeManagerRelation[] @relation("ManagerRelation")
  expenseApplications             ExpenseApplication[]      @relation("ExpenseApplicant")
  approvedExpenses                ExpenseApplication[]      @relation("ExpenseApprover")
  financialRecords                FinancialRecord[]
  followRecords                   FollowRecord[]
  meetingParticipants             MeetingParticipant[]
  organizedMeetings               Meeting[]                 @relation("MeetingOrganizer")
  meetingRecords                  MeetingRecord[]           @relation("MeetingRecorder")
  meetingSummaries                MeetingSummary[]          @relation("MeetingSummaryCreator")
  uploadedNotificationAttachments NotificationAttachment[]  @relation("NotificationAttachmentUploader")
  operationLogs                   OperationLog[]
  consultantTasks                 Task[]                    @relation("TaskConsultant")
  executorTasks                   Task[]                    @relation("TaskExecutor")
  marketManagerTasks              Task[]                    @relation("TaskMarketManager")
  responsibleTasks                Task[]                    @relation("TaskResponsiblePerson")
  uploadedTaskAttachments         TaskAttachment[]          @relation("TaskAttachmentUploader")
  userRoles                       UserRole[]
  createdClassStudents            ClassStudent[]            @relation("ClassStudentCreatedBy")
  employeeTargets                 EmployeeTarget[]          @relation("EmployeeTargets")
  managedTargets                  EmployeeTarget[]          @relation("ManagerTargets")
  loginRecords                    LoginRecord[]             @relation("UserLoginRecords")
  department                      Department?               @relation(fields: [departmentId], references: [id])

  @@map("users")
}

model Department {
  id        Int          @id @default(autoincrement())
  name      String       @db.VarChar(100)
  code      String       @unique @db.VarChar(50)
  parentId  Int?         @map("parent_id")
  level     Int          @default(1)
  sort      Int          @default(0)
  status    Int          @default(1)
  remark    String?
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  parent    Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentHierarchy")
  users     User[]

  @@map("departments")
}

model Role {
  id              Int              @id @default(autoincrement())
  roleName        String           @map("role_name") @db.VarChar(100)
  roleCode        String           @unique @map("role_code") @db.VarChar(50)
  department      String?          @db.VarChar(100)
  status          Int              @default(1)
  sort            Int              @default(0)
  remark          String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  roleType        String           @default("position") @map("role_type") @db.VarChar(20)
  canCreateClass  Boolean          @default(false) @map("can_create_class")
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  code            String           @unique @db.VarChar(100)
  type            String           @db.VarChar(20)
  parentId        Int?             @map("parent_id")
  path            String?          @db.VarChar(200)
  component       String?          @db.VarChar(200)
  icon            String?          @db.VarChar(100)
  sort            Int              @default(0)
  status          Int              @default(1)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  parent          Permission?      @relation("PermissionHierarchy", fields: [parentId], references: [id])
  children        Permission[]     @relation("PermissionHierarchy")
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Customer {
  id                  Int                  @id @default(autoincrement())
  customerName        String               @map("customer_name") @db.VarChar(100)
  gender              String?              @db.VarChar(10)
  company             String               @db.VarChar(200)
  position            String?              @db.VarChar(100)
  phone               String?              @db.VarChar(20)
  mobile              String?              @db.VarChar(20)
  email               String?              @db.VarChar(100)
  wechat              String?              @db.VarChar(100)
  industry            String?              @db.VarChar(100)
  source              String?              @db.VarChar(100)
  level               Int                  @default(1)
  followStatus        String               @map("follow_status") @db.VarChar(50)
  nextFollowTime      DateTime?            @map("next_follow_time")
  assignedToId        Int?                 @map("assigned_to_id")
  assignedById        Int?                 @map("assigned_by_id")
  assignedTime        DateTime?            @map("assigned_time")
  createdById         Int?                 @map("created_by_id")
  remark              String?
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  customerAssignments CustomerAssignment[]
  assignedTo          User?                @relation("AssignedToUser", fields: [assignedToId], references: [id])
  assignedBy          User?                @relation("AssignedByUser", fields: [assignedById], references: [id])
  createdBy           User?                @relation("CreatedByUser", fields: [createdById], references: [id])
  followRecords       FollowRecord[]

  @@map("customers")
}

model FollowRecord {
  id             Int       @id @default(autoincrement())
  customerId     Int       @map("customer_id")
  followType     String    @map("follow_type") @db.VarChar(50)
  followContent  String    @map("follow_content")
  followResult   String?   @map("follow_result")
  nextFollowTime DateTime? @map("next_follow_time")
  followUserId   Int       @map("follow_user_id")
  attachments    Json?
  createdAt      DateTime  @default(now()) @map("created_at")
  customer       Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  followUser     User      @relation(fields: [followUserId], references: [id])

  @@map("follow_records")
}

model CourseCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  code        String   @unique @db.VarChar(50)
  description String?
  sort        Int      @default(0)
  status      Int      @default(1)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  courses     Course[]

  @@map("course_categories")
}

model Course {
  id              Int                @id @default(autoincrement())
  courseName      String             @map("course_name") @db.VarChar(200)
  courseCode      String             @unique @map("course_code") @db.VarChar(50)
  categoryId      Int                @map("category_id")
  instructor      String             @db.VarChar(100)
  description     String?
  objectives      Json?
  outline         Json?
  duration        Int
  price           Decimal            @db.Decimal(10, 2)
  originalPrice   Decimal            @map("original_price") @db.Decimal(10, 2)
  maxStudents     Int                @map("max_students")
  currentStudents Int                @default(0) @map("current_students")
  startDate       DateTime           @map("start_date")
  endDate         DateTime           @map("end_date")
  location        String             @db.VarChar(200)
  tags            Json?
  status          Int                @default(0)
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  attachments     Attachment[]
  classes         Class[]
  enrollments     CourseEnrollment[]
  category        CourseCategory     @relation(fields: [categoryId], references: [id])

  @@map("courses")
}

model CourseEnrollment {
  id            Int      @id @default(autoincrement())
  courseId      Int      @map("course_id")
  studentName   String   @map("student_name") @db.VarChar(100)
  studentPhone  String   @map("student_phone") @db.VarChar(20)
  studentEmail  String?  @map("student_email") @db.VarChar(100)
  status        Int      @default(1)
  paymentStatus Int      @default(0) @map("payment_status")
  enrollTime    DateTime @default(now()) @map("enroll_time")
  remark        String?
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_enrollments")
}

model MeetingRoom {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  capacity  Int
  location  String    @db.VarChar(200)
  equipment Json?
  status    Int       @default(1)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  meetings  Meeting[]

  @@map("meeting_rooms")
}

model Meeting {
  id             Int                  @id @default(autoincrement())
  title          String               @db.VarChar(200)
  description    String?
  startTime      DateTime             @map("start_time")
  endTime        DateTime             @map("end_time")
  roomId         Int?                 @map("room_id")
  location       String?              @db.VarChar(200)
  meetingType    String               @map("meeting_type") @db.VarChar(50)
  status         Int                  @default(1)
  organizerId    Int                  @map("organizer_id")
  agenda         Json?
  attachments    Json?
  isRecurring    Boolean              @default(false) @map("is_recurring")
  recurringRule  String?              @map("recurring_rule") @db.VarChar(100)
  reminderTime   Int                  @default(15) @map("reminder_time")
  approvalStatus Int                  @default(1) @map("approval_status")
  approverId     Int?                 @map("approver_id")
  approvalTime   DateTime?            @map("approval_time")
  meetingNotes   String?              @map("meeting_notes")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  participants   MeetingParticipant[]
  records        MeetingRecord[]
  summaries      MeetingSummary[]
  organizer      User                 @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  room           MeetingRoom?         @relation(fields: [roomId], references: [id])

  @@map("meetings")
}

model MeetingParticipant {
  id        Int      @id @default(autoincrement())
  meetingId Int      @map("meeting_id")
  userId    Int      @map("user_id")
  role      String   @db.VarChar(20)
  status    Int      @default(1)
  response  String?
  createdAt DateTime @default(now()) @map("created_at")
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([meetingId, userId])
  @@map("meeting_participants")
}

model MeetingRecord {
  id          Int      @id @default(autoincrement())
  meetingId   Int      @map("meeting_id")
  title       String   @db.VarChar(200)
  content     String
  keyPoints   String?  @map("key_points")
  actionItems String?  @map("action_items")
  decisions   String?
  nextSteps   String?  @map("next_steps")
  recorderId  Int      @map("recorder_id")
  recordTime  DateTime @default(now()) @map("record_time")
  attachments Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  recorder    User     @relation("MeetingRecorder", fields: [recorderId], references: [id])

  @@map("meeting_records")
}

model MeetingSummary {
  id           Int      @id @default(autoincrement())
  meetingId    Int      @map("meeting_id")
  title        String   @db.VarChar(200)
  content      String
  conclusion   String?
  nextSteps    String?  @map("next_steps")
  participants Json?
  tags         Json?
  creatorId    Int      @map("creator_id")
  status       Int      @default(1)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  meeting      Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  creator      User     @relation("MeetingSummaryCreator", fields: [creatorId], references: [id])

  @@map("meeting_summaries")
}

model FinancialRecord {
  id          Int      @id @default(autoincrement())
  type        Int
  category    String   @db.VarChar(100)
  amount      Decimal  @db.Decimal(12, 2)
  description String
  relatedId   Int?     @map("related_id")
  relatedType String?  @map("related_type") @db.VarChar(50)
  recordDate  DateTime @map("record_date")
  createdById Int      @map("created_by_id")
  status      Int      @default(1)
  attachments Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@map("financial_records")
}

model SystemDict {
  id        Int      @id @default(autoincrement())
  dictType  String   @map("dict_type") @db.VarChar(100)
  dictLabel String   @map("dict_label") @db.VarChar(100)
  dictValue String   @map("dict_value") @db.VarChar(100)
  sort      Int      @default(0)
  status    Int      @default(1)
  remark    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([dictType, dictValue])
  @@map("system_dict")
}

model OperationLog {
  id            Int      @id @default(autoincrement())
  userId        Int?     @map("user_id")
  userName      String?  @map("user_name") @db.VarChar(50)
  operation     String   @db.VarChar(200)
  method        String   @db.VarChar(10)
  params        Json?
  result        Json?
  ip            String   @db.VarChar(50)
  userAgent     String?  @map("user_agent")
  executionTime Int      @map("execution_time")
  status        Int
  errorMsg      String?  @map("error_msg")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User?    @relation(fields: [userId], references: [id])

  @@map("operation_logs")
}

model Attachment {
  id            Int      @id @default(autoincrement())
  courseId      Int      @map("course_id")
  fileName      String   @map("file_name") @db.VarChar(255)
  originalName  String?  @map("original_name") @db.VarChar(255)
  fileType      String   @map("file_type") @db.VarChar(50)
  fileSize      Int      @map("file_size")
  uploaderId    Int      @map("uploader_id")
  uploadTime    DateTime @default(now()) @map("upload_time")
  downloadCount Int      @default(0) @map("download_count")
  status        Int      @default(1)
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploader      User     @relation("AttachmentUploader", fields: [uploaderId], references: [id])

  @@map("attachments")
}

model ClassCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  code        String   @unique @db.VarChar(50)
  description String?
  sort        Int      @default(0)
  status      Int      @default(1)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  classes     Class[]

  @@map("class_categories")
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(200)
  categoryId   Int            @map("category_id")
  description  String?
  startDate    DateTime       @map("start_date")
  endDate      DateTime       @map("end_date")
  status       Int            @default(0)
  studentCount Int            @default(0) @map("student_count")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  courseId     Int?           @map("course_id")
  students     ClassStudent[]
  category     ClassCategory  @relation(fields: [categoryId], references: [id])
  course       Course?        @relation(fields: [courseId], references: [id])

  @@map("classes")
}

model ClassStudent {
  id             Int      @id @default(autoincrement())
  classId        Int      @map("class_id")
  name           String   @db.VarChar(100)
  company        String   @db.VarChar(200)
  position       String?  @db.VarChar(100)
  phone          String?  @db.VarChar(20)
  landline       String?  @db.VarChar(20)
  email          String?  @db.VarChar(100)
  joinDate       DateTime @map("join_date")
  attendanceRate Int      @default(100) @map("attendance_rate")
  status         Int      @default(1)
  createdById    Int?     @map("created_by_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  avatar         String?  @db.VarChar(500)
  gender         String?  @db.VarChar(10)
  trainingFee    Decimal? @map("training_fee") @db.Decimal(10, 2)
  class          Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdBy      User?    @relation("ClassStudentCreatedBy", fields: [createdById], references: [id])

  @@map("class_students")
}

model Notification {
  id          Int                      @id @default(autoincrement())
  title       String                   @db.VarChar(200)
  content     String
  type        String                   @db.VarChar(50)
  userId      Int                      @map("user_id")
  readStatus  Int                      @default(0) @map("read_status")
  readTime    String?                  @map("read_time")
  relatedId   Int?                     @map("related_id")
  relatedType String?                  @map("related_type") @db.VarChar(50)
  createTime  String                   @map("create_time")
  attachments NotificationAttachment[]

  @@map("notifications")
}

model NotificationAttachment {
  id             Int          @id @default(autoincrement())
  notificationId Int          @map("notification_id")
  fileName       String       @map("file_name") @db.VarChar(255)
  originalName   String?      @map("original_name") @db.VarChar(255)
  fileType       String       @map("file_type") @db.VarChar(50)
  fileSize       Int          @map("file_size")
  uploaderId     Int          @map("uploader_id")
  uploadTime     DateTime     @default(now()) @map("upload_time")
  downloadCount  Int          @default(0) @map("download_count")
  status         Int          @default(1)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  uploader       User         @relation("NotificationAttachmentUploader", fields: [uploaderId], references: [id])

  @@map("notification_attachments")
}

model Task {
  id                       Int       @id @default(autoincrement())
  projectType              String    @map("project_type") @db.VarChar(100)
  projectName              String    @map("project_name") @db.VarChar(200)
  currentStage             String    @map("current_stage") @db.VarChar(50)
  stageHistory             Json?     @map("stage_history")
  responsiblePersonId      Int       @map("responsible_person_id")
  executorId               Int?      @map("executor_id")
  consultantId             Int?      @map("consultant_id")
  marketManagerId          Int?      @map("market_manager_id")
  priority                 Int       @default(2)
  startTime                DateTime  @map("start_time")
  endTime                  DateTime  @map("end_time")
  remark                   String?
  proposalAttachments      Json?     @map("proposal_attachments")
  proposalUploadTime       DateTime? @map("proposal_upload_time")
  proposalComment          String?   @map("proposal_comment")
  customerApprovalTime     DateTime? @map("customer_approval_time")
  customerApprovalComment  String?   @map("customer_approval_comment")
  teacherInfo              Json?     @map("teacher_info")
  teacherConfirmTime       DateTime? @map("teacher_confirm_time")
  teacherConfirmComment    String?   @map("teacher_confirm_comment")
  approvalTime             DateTime? @map("approval_time")
  approvalComment          String?   @map("approval_comment")
  contractSignTime         DateTime? @map("contract_sign_time")
  contractSignComment      String?   @map("contract_sign_comment")
  projectCompletionTime    DateTime? @map("project_completion_time")
  projectCompletionComment String?   @map("project_completion_comment")
  paymentTime              DateTime? @map("payment_time")
  paymentComment           String?   @map("payment_comment")
  paymentAmount            Decimal?  @map("payment_amount") @db.Decimal(10, 2)
  isCompleted              Boolean   @default(false) @map("is_completed")
  completionTime           DateTime? @map("completion_time")
  isArchived               Boolean   @default(false) @map("is_archived")
  archiveTime              DateTime? @map("archive_time")
  createTime               DateTime  @default(now()) @map("create_time")
  updateTime               DateTime  @updatedAt @map("update_time")
  consultant               User?     @relation("TaskConsultant", fields: [consultantId], references: [id])
  executor                 User?     @relation("TaskExecutor", fields: [executorId], references: [id])
  marketManager            User?     @relation("TaskMarketManager", fields: [marketManagerId], references: [id])
  responsiblePerson        User      @relation("TaskResponsiblePerson", fields: [responsiblePersonId], references: [id])
  attachments              TaskAttachment[]

  @@map("task")
}

model ExpenseApplication {
  id                 Int           @id @default(autoincrement())
  applicationNo      String        @unique @map("application_no") @db.VarChar(50)
  applicantId        Int           @map("applicant_id")
  expenseType        String        @map("expense_type") @db.VarChar(100)
  totalAmount        Decimal       @default(0) @map("total_amount") @db.Decimal(12, 2)
  applicationReason  String?       @map("application_reason")
  expensePeriodStart DateTime?     @map("expense_period_start")
  expensePeriodEnd   DateTime?     @map("expense_period_end")
  remark             String?
  applicationStatus  Int           @default(0) @map("application_status")
  currentApproverId  Int?          @map("current_approver_id")
  approvalTime       DateTime?     @map("approval_time")
  approvalComment    String?       @map("approval_comment")
  attachments        Json?
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  applicant          User          @relation("ExpenseApplicant", fields: [applicantId], references: [id])
  approver           User?         @relation("ExpenseApprover", fields: [currentApproverId], references: [id])
  items              ExpenseItem[]

  @@map("expense_applications")
}

model ExpenseItem {
  id            Int                @id @default(autoincrement())
  applicationId Int                @map("application_id")
  itemName      String             @map("item_name") @db.VarChar(200)
  itemType      String             @map("item_type") @db.VarChar(100)
  expenseDate   DateTime           @map("expense_date")
  amount        Decimal            @map("amount") @db.Decimal(12, 2)
  description   String?
  receiptNo     String?            @map("receipt_no") @db.VarChar(100)
  vendor        String?            @db.VarChar(200)
  createdAt     DateTime           @default(now()) @map("created_at")
  application   ExpenseApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("expense_items")
}

model EmployeeManagerRelation {
  id           Int      @id @default(autoincrement())
  employeeId   Int      @map("employee_id")
  managerId    Int      @map("manager_id")
  assignedById Int      @map("assigned_by_id")
  assignedTime DateTime @default(now()) @map("assigned_time")
  status       Int      @default(1)
  remark       String?
  assignedBy   User     @relation("AssignedByRelation", fields: [assignedById], references: [id])
  employee     User     @relation("EmployeeRelation", fields: [employeeId], references: [id], onDelete: Cascade)
  manager      User     @relation("ManagerRelation", fields: [managerId], references: [id], onDelete: Cascade)

  @@unique([employeeId, managerId])
  @@map("employee_manager_relations")
}

model EmployeeTarget {
  id              Int      @id @default(autoincrement())
  employeeId      Int      @map("employee_id")
  targetYear      Int      @map("target_year")
  targetType      String   @map("target_type") @db.VarChar(10) // 'week' or 'month'
  targetMonth     Int?     @map("target_month")    // 1-12, null for weekly targets
  targetWeek      Int?     @map("target_week")     // 1-53, null for monthly targets

  // 四种任务类型的目标数量
  consultTarget   Int?     @default(0) @map("consult_target")
  followUpTarget  Int?     @default(0) @map("follow_up_target")
  developTarget   Int?     @default(0) @map("develop_target")
  registerTarget  Int?     @default(0) @map("register_target")

  managerId       Int      @map("manager_id")
  remark          String?
  status          Int      @default(1)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  employee        User     @relation("EmployeeTargets", fields: [employeeId], references: [id], onDelete: Cascade)
  manager         User     @relation("ManagerTargets", fields: [managerId], references: [id])

  @@unique([employeeId, targetYear, targetType, targetMonth, targetWeek])
  @@map("employee_targets")
}

model CustomerAssignment {
  id           Int      @id @default(autoincrement())
  customerId   Int      @map("customer_id")
  assignedToId Int      @map("assigned_to_id")
  assignedById Int      @map("assigned_by_id")
  assignedTime DateTime @default(now()) @map("assigned_time")
  status       Int      @default(1)
  remark       String?
  assignedBy   User     @relation("CustomerAssignedBy", fields: [assignedById], references: [id])
  assignedTo   User     @relation("CustomerAssignedTo", fields: [assignedToId], references: [id])
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, assignedToId])
  @@map("customer_assignments")
}

model TaskAttachment {
  id            Int      @id @default(autoincrement())
  taskId        Int      @map("task_id")
  fileName      String   @map("file_name") @db.VarChar(255)
  originalName  String?  @map("original_name") @db.VarChar(255)
  fileType      String   @map("file_type") @db.VarChar(50)
  fileSize      Int      @map("file_size")
  uploaderId    Int      @map("uploader_id")
  uploadTime    DateTime @default(now()) @map("upload_time")
  downloadCount Int      @default(0) @map("download_count")
  status        Int      @default(1)
  description   String?  @db.VarChar(500)
  stage         String?  @map("stage") @db.VarChar(50)  // 哪个阶段上传的
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader      User     @relation("TaskAttachmentUploader", fields: [uploaderId], references: [id])

  @@map("task_attachments")
}

model LoginRecord {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  userName    String   @map("user_name") @db.VarChar(50)
  loginIp     String   @map("login_ip") @db.VarChar(50)
  userAgent   String?  @map("user_agent")
  loginTime   DateTime @default(now()) @map("login_time")
  loginResult String   @default("success") @map("login_result") @db.VarChar(20)
  location    String?  @db.VarChar(100)
  user        User     @relation("UserLoginRecords", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginTime])
  @@map("login_records")
}
